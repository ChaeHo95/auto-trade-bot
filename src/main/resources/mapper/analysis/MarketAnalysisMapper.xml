<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.autotradebot.mapper.analysis.MarketAnalysisMapper">

    <!-- ✅ 최근 200개의 캔들 데이터 -->
    <select id="getRecentKlines" resultType="com.example.autotradebot.dto.binance.BinanceKlineDTO">
        SELECT open_time,
               close_time,
               open_price,
               close_price,
               high_price,
               low_price,
               volume,
               trade_count
        FROM binance_kline
        WHERE symbol = #{symbol}
        ORDER BY open_time DESC LIMIT #{limit};
    </select>

    <!-- ✅ 최근 100개의 체결 거래 데이터 -->
    <select id="getRecentTrades" resultType="com.example.autotradebot.dto.binance.BinanceTradeDTO">
        SELECT trade_time, price, quantity, buyer_maker
        FROM binance_trade
        WHERE symbol = #{symbol}
        ORDER BY trade_time DESC LIMIT #{limit};
    </select>

    <!-- ✅ 최근 20개의 펀딩 비율 데이터 -->
    <select id="getFundingRates" resultType="com.example.autotradebot.dto.binance.BinanceFundingRateDTO">
        SELECT funding_time, funding_rate, mark_price, symbol
        FROM binance_funding_rate
        WHERE symbol = #{symbol}
        ORDER BY funding_time DESC LIMIT #{limit};
    </select>

    <!-- ✅ AI 분석 예측 정보 -->
    <select id="getChartAnalysis" resultType="com.example.autotradebot.dto.analysis.PredictionDTO">
        SELECT *
        FROM chart_analysis_predictions
        WHERE symbol = #{symbol}
          AND bot_type = #{botType}
        ORDER BY analysis_time DESC LIMIT 1;
    </select>

    <select id="getChartAnalysisLimit" resultType="com.example.autotradebot.dto.analysis.PredictionDTO">
        SELECT *
        FROM chart_analysis_predictions
        WHERE symbol = #{symbol}
          AND bot_type = #{botType}
        ORDER BY analysis_time DESC LIMIT #{limit};
    </select>

    <!-- ✅ 이동평균선 (최근 200개 캔들 기준) -->
    <select id="getMovingAverage" resultType="java.math.BigDecimal">
        SELECT IFNULL(AVG(close_price), 0.0000000000)
        FROM (SELECT close_price
              FROM binance_kline
              WHERE symbol = #{symbol}
              ORDER BY open_time DESC LIMIT #{limit}) subquery
        HAVING COUNT(*) = #{limit};
    </select>

    <!-- ✅ RSI 값 -->
    <select id="getRSIValue" resultType="java.math.BigDecimal">
        WITH rsi_data AS (SELECT open_time,
                                 close_price,
                                 LAG(close_price, 1) OVER (ORDER BY open_time) AS prev_close_price
                          FROM binance_kline
                          WHERE symbol = #{symbol}
                          ORDER BY open_time DESC
            LIMIT 14
            )
        SELECT 100 - (100 / (1 + (AVG(upward_movement) / NULLIF(AVG(downward_movement), 0)))) AS RSI
        FROM (SELECT open_time,
                     close_price,
                     prev_close_price,
                     CASE
                         WHEN close_price <![CDATA[ > ]]> prev_close_price THEN close_price - prev_close_price
                         ELSE 0
                         END AS upward_movement,
                     CASE
                         WHEN close_price <![CDATA[ < ]]> prev_close_price THEN prev_close_price - close_price
                         ELSE 0
                         END AS downward_movement
              FROM rsi_data) rsi_calc;
    </select>

    <!-- ✅ MACD 값 -->
    <select id="getMACDValue" resultType="java.math.BigDecimal">
        WITH ema_calc AS (SELECT open_time,
                                 -- EMA 공식 적용
                                 (close_price * (2.0 / (12 + 1))) + (LAG(ema_12, 1) OVER (PARTITION BY symbol ORDER BY open_time) * (1 - (2.0 / (12 + 1)))) AS ema_12,
                                 (close_price * (2.0 / (26 + 1))) + (LAG(ema_26, 1) OVER (PARTITION BY symbol ORDER BY open_time) * (1 - (2.0 / (26 + 1)))) AS ema_26
                          FROM (SELECT symbol,
                                       open_time,
                                       close_price,
                                       -- 초기 EMA 값을 단순 이동평균(SMA)로 설정
                                       AVG(close_price) OVER (PARTITION BY symbol ORDER BY open_time ROWS BETWEEN 11 PRECEDING AND CURRENT ROW) AS ema_12, AVG(close_price) OVER (PARTITION BY symbol ORDER BY open_time ROWS BETWEEN 25 PRECEDING AND CURRENT ROW) AS ema_26
                                FROM binance_kline
                                WHERE symbol = #{symbol}) base_data)
        SELECT (ema_12 - ema_26) AS MACD
        FROM ema_calc
        ORDER BY open_time DESC LIMIT 1;
    </select>

    <!-- ✅ 최근 청산 주문 데이터 조회 -->
    <select id="getLiquidationOrders" resultType="com.example.autotradebot.dto.binance.BinanceLiquidationOrderDTO">
        SELECT event_type,
               event_time,
               symbol,
               side,
               order_type,
               time_in_force,
               original_quantity,
               price,
               average_price,
               order_status,
               last_filled_quantity,
               total_filled_quantity,
               trade_time
        FROM binance_liquidation_orders
        WHERE symbol = #{symbol}
        ORDER BY event_time DESC LIMIT #{limit};
    </select>

    <!-- ✅ 최근 부분 주문서 데이터(Depth)만 조회 -->
    <select id="getPartialBookDepth"
            resultType="com.example.autotradebot.dto.binance.BinancePartialBookDepthDTO">
        SELECT b.event_type,
               b.event_time,
               b.transaction_time,
               b.symbol,
               b.first_update_id,
               b.final_update_id,
               b.previous_update_id
        FROM binance_partial_book_depth b
        WHERE b.symbol = #{symbol}
        ORDER BY b.event_time DESC
            LIMIT #{limit};
    </select>

    <!-- ✅ 심볼과 event_time을 기준으로 binance_order_book_entries 데이터 조회 -->
    <select id="getOrderBookEntriesBySymbolAndEventTime"
            resultType="com.example.autotradebot.dto.binance.BinanceOrderBookEntryDTO">
        SELECT boe.type AS order_type,
               boe.price,
               boe.quantity
        FROM binance_order_book_entries boe
                 JOIN binance_partial_book_depth b
                      ON boe.transaction_time = b.transaction_time
        WHERE b.symbol = #{symbol}
          AND b.event_time = #{eventTime}
        ORDER BY boe.transaction_time DESC;
    </select>
</mapper>

